@model List<SmartAdminMvc.Models.YearlyReportModel>
@{
    ViewBag.Title = "CompanyBudgetReport";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<!-- MAIN CONTENT -->
<div id="content">

    <!-- row -->
    <div class="row">
        @*@using (Html.BeginForm(new { ReturnUrl = ViewBag.ReturnUrl }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                    <!-- col -->
                    <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
                        <h1 class="page-title txt-color-blueDark">

                            <!-- PAGE HEADER -->
                            <i class="fa fa-fw fa-bar-chart-o"></i>
                            Budget Report:
                                @Html.TextBoxFor(Model => Model.BudgetDate, new { @class = "form-control", id = "BudgetDate", type = "datetime" })
                                <button type="submit" id="btnsave" class="btn btn-primary">
                                    Make report
                                </button>

                        </h1>
                    </div>
            }*@
        @using (Ajax.BeginForm("YearlyBudgetReport", "CompanyReport"
                , new { pageno = 1, isAsc = true }
                , new AjaxOptions
                {
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "POST",
                    UpdateTargetId = "TargetId"
                }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            <div class="col-xs-12 srchrow ">
                <div class="row center">
                    <div class="srchbar_table">
                        @*<label> Select date to generate report : </label>*@
                        @*<input id="reportdate" name="reportdate" value="@ViewBag.reportdate" required="required" class="form-control datepicker23" />*@
                        <label> Select Year: </label>

                        @Html.DropDownList("Year", new List<SelectListItem>()
{
    //new SelectListItem(){ Text= "2000", Value = "2000"},
    //new SelectListItem(){ Text= "2001", Value = "2001"},
    //new SelectListItem(){ Text= "2002", Value = "2002"},
    //new SelectListItem(){ Text= "2003", Value = "2003"},
    //new SelectListItem(){ Text= "2004", Value = "2004"},
    //new SelectListItem(){ Text= "2005", Value = "2005"},
    //new SelectListItem(){ Text= "2006", Value = "2006"},
    //new SelectListItem(){ Text= "2007", Value = "2007"},
    // new SelectListItem(){ Text= "2008", Value = "2008"},
    //new SelectListItem(){ Text= "2009", Value = "2009"},
    //new SelectListItem(){ Text= "2010", Value = "2010"},
    //new SelectListItem(){ Text= "2011", Value = "2011"},
    //  new SelectListItem(){ Text= "2012", Value = "2012"},
    // new SelectListItem(){ Text= "2013", Value = "2013"},
    //new SelectListItem(){ Text= "2014", Value = "2014"},
    //new SelectListItem(){ Text= "2015", Value = "2015"},
    new SelectListItem(){ Text= "2016", Value = "2016"},
    new SelectListItem(){ Text= "2017", Value = "2017"},
    new SelectListItem(){ Text= "2018", Value = "2018"},
    new SelectListItem(){ Text= "2019", Value = "2019"},
    new SelectListItem(){ Text= "2020", Value = "2020"},
    new SelectListItem(){ Text= "2021", Value = "2021"},
    new SelectListItem(){ Text= "2022", Value = "2022"},
    new SelectListItem(){ Text= "2023", Value = "2023"},
    new SelectListItem(){ Text= "2024", Value = "2024"},
     new SelectListItem(){ Text= "2025", Value = "2025"},
    new SelectListItem(){ Text= "2026", Value = "2026"},
    new SelectListItem(){ Text= "2027", Value = "2027"},
    new SelectListItem(){ Text= "2028", Value = "2028"},
      new SelectListItem(){ Text= "2029", Value = "2029"},
     new SelectListItem(){ Text= "2030", Value = "2030"}
}, "Select Year", new { @class = "form-control", @required = "required", id = "ddYear" })
                        <div class="gobtn_radio"><button class="btn btn-primary" type="submit">Go!</button></div>
                    </div>
                </div>
            </div>
        }

    </div>
    <!-- end row -->
    <div id="TargetId">
    </div>
    @*@Html.Partial("CompanyReportList", Model)*@
    <!--
    The ID "widget-grid" will start to initialize all widgets below
    You do not need to use widgets if you dont want to. Simply remove
    the <section></section> and you can use wells or panels instead
    -->
    <div >
        <div class="jarviswidget-editbox">
        </div>
        @using (Ajax.BeginForm("YearlyBudgetReport", "CompanyReport", new AjaxOptions
            {
                InsertionMode = InsertionMode.Replace,
                HttpMethod = "POST",
                UpdateTargetId = "TargetId",
                OnSuccess = "updateSuccess"
            }))
            {
            <div class="widget-body no-padding">
                <div id="chart_div" style="width: 400px; height: 120px;"></div>
                <table id="datatable_tabletools" class="table table-striped table-bordered table-hover" width="100%">
                    @if (Model.Count() > 0)
                    {
                        <thead>
                            <tr>
                                @*<th data-class="expand"> Category </th>
                                    <th data-class="expand"> Weekly Budget </th>*@
                                @*<th data-class="expand"> Report of @ViewBag.reportdate </th>*@

                            </tr>
                        </thead>
                    }
                    <tbody>
                        @if (Model.Count() > 0)
                        {
                            <tr>
                                <td>
                                    @foreach (var item in Model)
                                    {



                                    <div class="jarviswidget con_table" id="wid-id-6" data-widget-colorbutton="false" data-widget-fullscreenbutton="false" data-widget-editbutton="false" data-widget-sortable="false">
                                        <!-- widget options:
                            usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                            data-widget-colorbutton="false"
                            data-widget-editbutton="false"
                            data-widget-togglebutton="false"
                            data-widget-deletebutton="false"
                            data-widget-fullscreenbutton="false"
                            data-widget-custombutton="false"
                            data-widget-collapsed="true"
                            data-widget-sortable="false"

                        -->
                                        <header class="con_titel">

                                            <h2>@Html.DisplayFor(modelitem => item.CategoryName)</h2>

                                        </header>

                                        <!-- widget div-->
                                        <div>

                                            <!-- widget edit box -->
                                            <div class="jarviswidget-editbox">
                                                <!-- This area used as dropdown edit box -->
                                                <input class="form-control" type="text">
                                            </div>
                                            <!-- end widget edit box -->
                                            <!-- widget content -->
                                            <div class="widget-body">

                                                <input type="hidden" Id="hdnCategory-@item.categoryId" class="csscategory" value="@item.categoryId" />

                                                <label class="spidodivleb">
                                                    @*<i></i> @item.weekAmountlist[i].mybugetweek1 /
                                        <i></i> @item.weekAmountlist[i].bugetLineweek1*@
                                                    <input type="hidden" Id="mybuget-@item.categoryId" value="@item.RealBudgetTotal" />
                                                    <input type="hidden" Id="bugetLine-@item.categoryId" value="@item.BudgetAmountTotal" />
                                                    <input type="hidden" Id="BudgetTypeId-@item.categoryId" value="@item.budgettypeId" />                      
                                                    @*@Html.HiddenFor(m => item.weekAmountlist[i].mybugetweek1, new { id= "mybugetweek1-"+item.categoryId , value = item.weekAmountlist[i].mybugetweek1, name = "mybugetweek1-" + item.categoryId })
                                        @Html.HiddenFor(m => item.weekAmountlist[i].bugetLineweek1, new { id = "bugetLineweek1-"+ item.categoryId , value = item.weekAmountlist[i].bugetLineweek1, name = "bugetLineweek1-" + item.categoryId })*@
                                                    @*<canvas id="pieChart@(i)@item.categoryId" height="60"><script> initializeCanvas(@item.weekAmountlist[i].mybugetweek1,@item.weekAmountlist[i].bugetLineweek1,pieChart@(i)@item.categoryId); </script></canvas>*@
                                                    <div id="chart_div-@item.categoryId" style="width: 400px; height: 150px;"></div>
                                                    
                                                    @*<canvas id="pieChart-@item.categoryId" height="120" width="100"></canvas>*@

                                                </label>
                                                <div class="total_bon_bottom">
                                                    <span class="mybudget_radio">
                                                        <label>My Actual Amount: </label>
                                                       @System.Configuration.ConfigurationManager.AppSettings["CurrencySymbol"].ToString()@String.Format("{0:N2}", item.RealBudgetTotal)

                                                    </span>
                                                    <span class="budgetamount_radio">
                                                        <label>Budgeted Amount: </label>
                                                        @*@item.weekAmountlist[i].bugetLineweek1.ToString("0.00");*@
                                                       @System.Configuration.ConfigurationManager.AppSettings["CurrencySymbol"].ToString()@String.Format("{0:N2}", item.BudgetAmountTotal)
                                                    </span>
                                                    <span class="budgetamount_radio">
                                                        <label>Difference: </label>
                                                        @*@item.weekAmountlist[i].bugetLineweek1.ToString("0.00");*@
                                                        <lebel id="Difference-@item.categoryId">00.00 %</lebel>  
                                                    </span>
                                                    </div>
                                                </div>
                                            <!-- end widget content -->

                                        </div>
                                        <!-- end widget div -->

                                    </div>

                                    @*<tr>
                                <td>
                                    <span class="ReportCategoryName">
                                        @Html.DisplayFor(modelitem => item.CategoryName)
                                </span>
                            </td>
                        </tr>
                                <tr>

                                    <td>
                                        <input type="hidden" Id="hdnCategory-@item.categoryId" class="csscategory" value="@item.categoryId" />

                                                            <label class="radio">

                                                                <input type="hidden" Id="mybuget-@item.categoryId" value="@item.RealBudgetTotal" />
                                                                <input type="hidden" Id="bugetLine-@item.categoryId" value="@item.BudgetAmountTotal" />
                                                              <canvas id="pieChart-@item.categoryId" height="120" width="100"></canvas>

                                                            </label>
                                                            <span class="mybudget">
                                                                <label>My Actual Amount: </label>
                                                                @String.Format("{0:0.00}", item.RealBudgetTotal)

                                                            </span>
                                                            <span class="budgetamount">
                                                                <label>Budgeted Amount: </label>

                                                                @String.Format("{0:0.00}", item.BudgetAmountTotal)
                                                            </span>
                                  </td>
                                </tr>*@
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label class="radio radio_con">

                                        @*<canvas  id="pieChartOfTotal"></canvas>*@
                                        <div id="ChartOfTotal" style="width: 400px; height: 200px;"></div>
                                    </label>
                                    <div class="total_bon_bottom">
                                        <span class="mybudget_total">
                                            <label>Income: </label>
                                            @System.Configuration.ConfigurationManager.AppSettings["CurrencySymbol"].ToString()<lebel id="TotalIncome"></lebel>
                                        </span>
                                        <span class="budgetamount_total">
                                            <label>Expense: </label>
                                            @System.Configuration.ConfigurationManager.AppSettings["CurrencySymbol"].ToString()<lebel id="TotalExpance"></lebel>
                                        </span>
                                        <span class="budgetamount_total">
                                            <label id="txtmargin">Profit margin: </label>
                                            <lebel id="margin"></lebel>
                                        </span>
                                    </div>
                                </td>
                            </tr>
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(ViewBag.year))
                            {
                                <tr>
                                    <td>
                                        <p class="alert alert-warning">
                                            <i class="fa fa-warning fa-fw fa-lg"></i><strong>!</strong>
                                            No data found for selected month.
                                            @*, Plese select date for genret report*@
                                        </p>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>

                </table>

            </div>
        }
    </div>

</div>
<!-- END MAIN CONTENT -->
@*@section pagespecific {
        <script type="text/javascript">

            $(function () { // will trigger when the document is ready
                $('.datepicker23').datepicker({

                    dateFormat: 'mm/dd/yy',

                    onSelect: function () { }
                }); //Initialise any date pickers
            });

        </script>
    }*@
@section pagespecific {
    <script type="text/javascript">

            $(document).ready(function () {

                /* DO NOT REMOVE : GLOBAL FUNCTIONS!
                 *
                 * pageSetUp(); WILL CALL THE FOLLOWING FUNCTIONS
                 *
                 * // activate tooltips
                 * $("[rel=tooltip]").tooltip();
                 *
                 * // activate popovers
                 * $("[rel=popover]").popover();
                 *
                 * // activate popovers with hover states
                 * $("[rel=popover-hover]").popover({ trigger: "hover" });
                 *
                 * // activate inline charts
                 * runAllCharts();
                 *
                 * // setup widgets
                 * setup_widgets_desktop();
                 *
                 * // run form elements
                 * runAllForms();
                 *
                 ********************************
                 *
                 * pageSetUp() is needed whenever you load a page.
                 * It initializes and checks for all basic elements of the page
                 * and makes rendering easier.
                 *
                 */

//                pageSetUp();

                /*
                 * ALL PAGE RELATED SCRIPTS CAN GO BELOW HERE
                 * eg alert("my home function");
                 *
                 * var pagefunction = function() {
                 *   ...
                 * }
                 * loadScript("js/plugin/_PLUGIN_NAME_.js", pagefunction);
                 *
                 * TO LOAD A SCRIPT:
                 * var pagefunction = function (){
                 *  loadScript(".../plugin.js", run_after_loaded);
                 * }
                 *
                 * OR
                 *
                 * loadScript(".../plugin.js", run_after_loaded);
                 */

                // reference: http://www.chartjs.org/docs/
                // ref: http://www.chartjs.org/docs/#line-chart-introduction

                // PIE CHART

                var marker = [];
                var JSmodel = @Html.Raw(Json.Encode(Model));
                @* @foreach (var item in Model)
                {
                  @for (int i = 0; i < item.weekAmountlist.Count(); i++)
                     {*@
                    //  marker[item.weekAmountlist.Count()] = [
                    //                                   {
                    //        value: count,
                    //       color: "rgba(220,220,220,0.9)",
                    //       highlight: "rgba(220,220,220,0.8)",
                    //       label: "My Buget"
                    //   },
                    //   {
                    //       value: count,
                    //       color: "rgba(169, 3, 41, 0.7)",
                    //       highlight: "rgba(169, 3, 41, 0.7)",
                    //       label: "Buget Amount"
                    //   }
                    //];

                 // render chart
                 //var ctx = document.getElementById("pieChart").getContext("2d");
                 //var myNewChart = new Chart(ctx).Pie(pieData, pieOptions);
             @*}
         }*@ // END PIE CHART
               //Initialise any date pickers
                $("#TotalIncome").text(TotalofIncome);
                $("#TotalExpance").text(TotalofExpance);
                var totalparsentage = 0;
                var profit_loss =0
                if(parseFloat(TotalofIncome) > parseFloat(TotalofExpance))
                {
                    $("#txtmargin").text("Profit Margin: "); 
                    //$("#margin").style.color = 'green';
                    //$('#margin').css('color', 'green');
                    $('#margin').css("color", "green");
                    $('#margin').css("bold", true);
                    profit_loss =parseFloat(TotalofIncome)- parseFloat(TotalofExpance);
                    totalparsentage = Number((profit_loss * 100) / parseFloat(TotalofIncome)).toFixed(2);;
                }
                else
                {
                    $("#txtmargin").text("Loss Margin: ");
                    //$("#margin").style.color = 'red';
                    //$('#margin').attr('color', 'red');
                    $('#margin').css("bold", true);
                    $('#margin').css("color", "red");
                    profit_loss =parseFloat(TotalofExpance)-parseFloat(TotalofIncome);
                    totalparsentage = Number((profit_loss * 100) / parseFloat(TotalofIncome)).toFixed(2);

                }
              
                $("#margin").text(totalparsentage+"%"); 
                google.charts.load('current', {'packages':['gauge']});
                google.charts.setOnLoadCallback(drawChart);
                function drawChart() {
                    $("input.csscategory").each(function() {
                        //alert("in");
                        var val = $(this).val();
                       
                        var bugetLineweek = $("#bugetLine-"+val).val();
                        var mybugetweek = $("#mybuget-"+val).val();
                    var data = google.visualization.arrayToDataTable([
                      ['Label', 'Value'],
                      ['', { v: Math.round(mybugetweek), f: Math.round(mybugetweek) } ]
                    ]);
                 
                    var MaxLimint= Math.round(bugetLineweek)*2 ;
                    var MinLimit=Math.round(bugetLineweek)/2 ;
                    var difference = (100-((parseFloat(bugetLineweek)/parseFloat(mybugetweek))*100));
                    var BudgetTypeId = $("#BudgetTypeId-"+val).val(); 

                    if(( MinLimit > Math.round(mybugetweek)) || ( MaxLimint < Math.round(mybugetweek)))
                    {
                        if((MinLimit > Math.round(mybugetweek)))
                        {
                            MinLimit = Math.round(mybugetweek)-1000;                                  
                        }
                        if(BudgetTypeId == 1)
                        { 
                            var options = {
                                width: 400, height: 150,
                                greenFrom: Math.round(bugetLineweek), greenTo: MaxLimint,
                                redFrom:0, redTo: Math.round(bugetLineweek),
                                max:MaxLimint,min:0,
                                minorTicks: 5
                            };
                        }
                        else if(BudgetTypeId == 2)
                        {
                            var options = {
                                width: 400, height: 150,
                                redFrom: Math.round(bugetLineweek), redTo: MaxLimint,
                                greenFrom:0, greenTo: Math.round(bugetLineweek),
                                max:MaxLimint,min:0,
                                minorTicks: 5
                            };
                        }
                    }
                    else
                    {
                        if(BudgetTypeId == 1)
                        { 
                            var options = {
                                width: 400, height: 150,
                                greenFrom: Math.round(bugetLineweek), greenTo: MaxLimint,
                                redFrom:0, redTo: Math.round(bugetLineweek),
                                max:MaxLimint,min:0,
                                minorTicks: 5
                            };
                        }
                        else if(BudgetTypeId == 2)
                        {
                            var options = {
                                width: 400, height: 150,
                                redFrom: Math.round(bugetLineweek), redTo: MaxLimint,
                                greenFrom:0, greenTo: Math.round(bugetLineweek),
                                max:MaxLimint,min:0,
                                minorTicks: 5
                            };
                        }
                           
                         //var options = {
                        //    width: 400, height: 120,
                        //    redFrom: 50, redTo: 300,
                        //    greenFrom:00, greenTo: 50,
                        //    max:300,min:00,
                        //    minorTicks: 5
                        //};
                    }         
                         

                    var chart = new google.visualization.Gauge(document.getElementById('chart_div-'+val));

                    chart.draw(data, options);
                    });

                    var data = google.visualization.arrayToDataTable([
                        ['Label', 'Value'],
                        ['Yearly', { v: Math.round(TotalofIncome), f: profit_loss.toFixed(2).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") }],
                      
                    ]);
                    var MaxLimint= Math.round(TotalofExpance)*2 ;
                    var MinLimit=Math.round(TotalofExpance)/2 ;
                   
                    var options = {
                        width: 400, height: 200,
                        greenFrom: Math.round(TotalofExpance), greenTo: MaxLimint,
                        redFrom:0, redTo: Math.round(TotalofExpance),
                        max:MaxLimint,min:0,
                        minorTicks: 5
                        
                    };
                    //var options = {
                    //    width: 400, height: 120,
                    //    redFrom: 50, redTo: 300,
                    //    greenFrom:00, greenTo: 50,
                    //    max:300,min:00,
                    //    minorTicks: 5
                    //};
                          
                         
                    var chart = new google.visualization.Gauge(document.getElementById('ChartOfTotal'));
                    chart.draw(data, options);  
                }

                    })
                 
        $('.datepicker23').datepicker({
            // document.getElementById('.datepicker23').datepicker({
            dateFormat: 'mm/dd/yy',

            onSelect: function () { }

        });
        var TotalofExpance =0;
        var TotalofIncome =0;
        $("input.csscategory").each(function() {
            //alert("in");
            var val = $(this).val();
            //alert(val);

                var pieOptions = {
                    //Boolean - Whether we should show a stroke on each segment
                    segmentShowStroke: true,
                    //String - The colour of each segment stroke
                    segmentStrokeColor: "#fff",
                    //Number - The width of each segment stroke
                    segmentStrokeWidth: 2,
                    //Number - Amount of animation steps
                    animationSteps: 100,
                    //String - types of animation
                    animationEasing: "easeOutBounce",
                    //Boolean - Whether we animate the rotation of the Doughnut
                    animateRotate: true,
                    //Boolean - Whether we animate scaling the Doughnut from the centre
                    animateScale: false,
                    //Boolean - Re-draw chart on page resize
                    responsive: true,
                    //String - A legend template
                    legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
                };
                //var bugetLineweek = document.getElementById("bugetLineweek"+i+"-"+val);
                //var mybugetweek = document.getElementById("mybugetweek"+i+"-"+val);
                var bugetLineweek = $("#bugetLine-"+val).val();
                var mybugetweek = $("#mybuget-"+val).val();
                //alert(bugetLineweek+val);
                //alert(mybugetweek+val);
                //var bugetLineweek = document.getElementById('<%= bugetLineweek'+i+'-'+val+'.ClientID %>').value;
                //var mybugetweek = document.getElementById('<%= mybugetweek'+i+'-'+val+'.ClientID %>').value;
                //alert(mybugetweek);
                var pieData = [
                       {
                           value:Number(mybugetweek).toFixed(2),
                          // value: 300,
                           color: "rgba(220,220,220,0.9)",
                           highlight: "rgba(220,220,220,0.8)",
                           // label: "My Actual Amount"
                       },
                       {
                           value:Number(bugetLineweek).toFixed(2),
                          // value: 100,
                           color: "rgba(169, 3, 41, 0.7)",
                           highlight: "rgba(169, 3, 41, 0.7)",
                           // label: "Budgeted Amount"
                       }
                ];
               // alert("pieChart"+i+"-"+val);
                 //var ctx = document.getElementById("pieChart-"+val).getContext("2d");
                 //var myNewChart = new Chart(ctx).Pie(pieData, pieOptions);
                var BudgetTypeId = $("#BudgetTypeId-"+val).val(); 
                if(BudgetTypeId == 1)
                {
                    //  alert(BudgetTypeId);
                    TotalofIncome = parseFloat(TotalofIncome) + parseFloat(mybugetweek);
                }
                else if(BudgetTypeId == 2)
                {
                    // alert(BudgetTypeId);  
                    TotalofExpance = parseFloat(TotalofExpance) + parseFloat(mybugetweek);
                }
                 var difference = (100-((parseFloat(bugetLineweek)/parseFloat(mybugetweek))*100));
                 if(difference>0)
                 {
                     if(BudgetTypeId == 1)
                     {
                         $("#Difference-"+val).text(Number(difference).toFixed(2)+" %"); 
                         $("#Difference-"+val).css("color", "green");
                         $("#Difference-"+val).css("bold", true);
                     }
                     else if(BudgetTypeId == 2)
                     {
                         $("#Difference-"+val).text(Number(difference).toFixed(2)+" %"); 
                         $("#Difference-"+val).css("color", "red");
                         $("#Difference-"+val).css("bold", true);
                     }
                 }
                 else 
                 {
                     if(BudgetTypeId == 1)
                     {
                         $("#Difference-"+val).text(Number(difference).toFixed(2)*(-1)+" %"); 
                         $("#Difference-"+val).css("color", "red");
                         $("#Difference-"+val).css("bold", true);
                     }
                     else if(BudgetTypeId == 2)
                     {
                         $("#Difference-"+val).text(Number(difference).toFixed(2)*(-1)+" %"); 
                         $("#Difference-"+val).css("color", "green");
                         $("#Difference-"+val).css("bold", true);
                     }
                   
                 }
               
        });
    </script>
}





